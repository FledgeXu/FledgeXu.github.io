<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曳东搬西</title>
  
  
  <link href="http://blog.otakusaikou.com/atom.xml" rel="self"/>
  
  <link href="http://blog.otakusaikou.com/"/>
  <updated>2020-11-19T03:20:05.914Z</updated>
  <id>http://blog.otakusaikou.com/</id>
  
  <author>
    <name>Fledge Shiu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件工程师装屄指南</title>
    <link href="http://blog.otakusaikou.com/2020/11/19/how-to-become-a-poser/"/>
    <id>http://blog.otakusaikou.com/2020/11/19/how-to-become-a-poser/</id>
    <published>2020-11-19T10:25:38.000Z</published>
    <updated>2020-11-19T03:20:05.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="免责说明"><a href="#免责说明" class="headerlink" title="免责说明"></a>免责说明</h2><p>首先说明，本文是戏文，并没有实际映射到到某个人，如果你发现有些人能对号入座，那我倍感荣幸。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在现在的互联网上，你总是能在各种的广告、书籍的腰封和社交媒体上看到各式各样的人在称呼各种各样的人为「大神/大佬/牛人」。我对这些称呼并无好感，而且这也不是本文的重点，本文的重点是：如何让你成为一个这样的人。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在要开始成为这些人之前，你得先做点准备工作，确切的来说你得准备一下你的背景。为了让人在第一印象中觉得你很牛屄，一个精心准备的背景是必不可少的。那么接下来的问题就是，怎么样才算得上是个「精心准备的背景」呢？答案很简单，就和你写工作简历一样，突出你之前相对来说做的好的地方。当然在互联网上宣传自己，还是和写简历有所区别。</p><ol><li>学习经历，如果你有海外名校或者国内名校的学习经历，可以写上，如果没有就不用写了</li><li>工作经历，这里和写简历不同，你不需要突出你具体干了哪些事，可以直接写公司名称，借着公司招牌宣传自己</li><li>项目经历，有最好，如果没有一个非常牛屄项目经历就不用写了，当然如果你是某个著名开源项目的贡献者，你可以写上。</li></ol><p>总儿言之这里的关键点是「借者别人的名号宣传自己」。换句话说，你要想尽办法拉起别人的大旗，哪怕这个旗和你只有一点点沾边。</p><h2 id="培养名声"><a href="#培养名声" class="headerlink" title="培养名声"></a>培养名声</h2><p>有了背景之后，接下来就需要培养名声了。其实这里应该还有做角色定位的一步，但是我觉得一个人不能做不符合自己内心的事太久，所以按照你的喜好来就行。</p><p>那么接下的问题就是如何培养名声。首先要选择你的话题，选择话题的第一要点是要选你喜欢的立场，其次是要选择大家都关心的事，另外这里你还得选择和大部分看法相反的立场或者相近的立场，中间派是没法快速收获名声的，具体怎么选就看你怎么想了。</p><p>在互联网上，收集名声最好的方法还是写文章，当然我知道对于大部分的软件工程师来说，写文章还是过于的困难了。所以这里有个简便的方法，也就是所谓的「洗稿」。当然，如果你洗中文世界的稿，先不说别人会不会来找你，光是中文世界文章这个落后性，你就赚取不了名声。所以，你可以洗英文世界的稿件。你需要做的就是到类似 Hacker News 的网站上，找一些话题相同的文章，半翻译，半插入几句自己观点的方式，将其变成一篇中文的稿件。</p><p>有了稿件之后，下一步就是如何发布这些稿件，非常简单，去各种社交媒体上发布就行，什么知乎，微信公众号，当然作为软件工程师你的博客上也需要有一份。什么，你说你是在文章里反对微信的，不想到微信公众号里发文章。别闹了，流量才是关键，大家看的是个情绪，谁管你是真做还是假做。哪怕有人指责你，你也可以写点不痛不痒的话圆回来。</p><p>当然另一个好的办法就是通过类似微博或者推特的平台收集名声。你只需要稍微转发几条英文的新闻，别忘了加上一些看上去有道理的评论，粉丝名气自然而然的就来了。不过这种转发效应太慢，还是写文章来的快。</p><h2 id="公关管理"><a href="#公关管理" class="headerlink" title="公关管理"></a>公关管理</h2><p>随着时间的积累，你肯定会收获一点名气，于此同时也肯定会有一些人来批评你。对于这些人解决方法有两种：如果他比起你来没什么名气，你直接拉黑，屏蔽一条龙就行。如果批评你的人比起你的名气要大很多，那么就是坚决斗到底，这样你你还可以吸引一批不喜欢对方的人。</p><p>另外，在收获名声的过程中，你还得学会抱大腿，加入各种名人的圈子，这样别人有意无意的带上你，你也可以收获大批粉丝。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;免责说明&quot;&gt;&lt;a href=&quot;#免责说明&quot; class=&quot;headerlink&quot; title=&quot;免责说明&quot;&gt;&lt;/a&gt;免责说明&lt;/h2&gt;&lt;p&gt;首先说明，本文是戏文，并没有实际映射到到某个人，如果你发现有些人能对号入座，那我倍感荣幸。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>X86 软路由配置 IPv6 踩坑小记</title>
    <link href="http://blog.otakusaikou.com/2020/11/11/x86-soft-router-and-ipv6/"/>
    <id>http://blog.otakusaikou.com/2020/11/11/x86-soft-router-and-ipv6/</id>
    <published>2020-11-11T12:46:28.000Z</published>
    <updated>2020-11-19T03:20:05.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景故事"><a href="#背景故事" class="headerlink" title="背景故事"></a>背景故事</h2><p>这一次踩坑之旅的起源是一段来自内核恐慌 Telegram 群的关于 IPv6 的讨论，<a href="https://twitter.com/RioJot">Rio</a> 发了关于他配置 IPv6 时候的踩坑<a href="https://www.v2ex.com/t/722411">帖子</a>，而我正好一直想把家里软路由的 IPv6 配置起来，就有了这一次经历。这里非常感谢 Rio 和听众群的朋友，没有他们的帮助也就没有这次的经历。</p><h2 id="关于-IPv6-的小介绍"><a href="#关于-IPv6-的小介绍" class="headerlink" title="关于 IPv6 的小介绍"></a>关于 IPv6 的小介绍</h2><p>在开始配置环境之前，我想先做一个关于 IPv6 的小介绍。介绍一下之后会涉及到的一些概念，比如：RA，slaac 等。这个介绍不会涉及到 IPv6 整体是怎么工作的，主要介绍一下在 IPv6 设备是如何获取 IPv6 地址的。</p><p>在开始介绍在 IPv6 环境之前，得先介绍一下什么是 RA。RA 也就是：Router Advertisement（路由器通告报文）是一种 ICMPv6 报文，ICMP 也就是我们日常 Ping 命令使用的报文。在 IPv6 点环境中路由发出的 RA 会携带一系列的信息告知设备如何配置自己的 IP 地址。</p><p>在 IPv6 中有多种自动配置 IP 的方式，这里我们只会接触到 slaac 和 DHCPv6，下面有个关于这两种方式区别的解释。</p><blockquote><p><strong>其中“自动配置”根据获取方式，又分为</strong></p><p>▷ 无状态（Stateless）：根据路由通告报文RA（Router Advertisement）包含的prefix前缀信息自动配置IPv6地址，组成方式是Prefix + (EUI64 or 随机)。Stateless也可以称为SLAAC（Stateless address autoconfiguration）</p><p>▷ 有状态（Stateful）：通过DHCPv6方式获得IPv6地址</p><p>——<a href="https://cloud.tencent.com/developer/article/1517325">IPv6系列-详解自动分配IPv6地址</a></p></blockquote><p>因为安卓设备只支持 slaac，所以我使用了 slaac 方式配置局域网内设备的IP。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>我这里使用系统是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux version 4.19.0-9-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debian 8.3.0-6)) #1 SMP Debian 4.19.118-2+deb10u1 (2020-06-07)</span><br></pre></td></tr></table></figure><p>机器本身是一台四个网口的软路由。</p><p>上网方式是 PPPoE 拨号上网</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>首先配置网卡。</p><p><code>/etc/network/interfaces</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;network&#x2F;interfaces.d&#x2F;*</span><br><span class="line"></span><br><span class="line"># 本地接口</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"># 广域网接口</span><br><span class="line">allow-hotplug enp1s0</span><br><span class="line"></span><br><span class="line"># 局域网接口</span><br><span class="line">auto br0</span><br><span class="line">allow-hotplug br0</span><br><span class="line">iface br0 inet static</span><br><span class="line">      address 192.168.2.1</span><br><span class="line">      network 192.168.2.0</span><br><span class="line">      netmask 255.255.255.0</span><br><span class="line">      brocast 192.168.2.255</span><br><span class="line">      bridge-ports enp2s0 enp3s0 enp4s0</span><br><span class="line">      </span><br><span class="line"># PPPoE 接口，由 pppoeconf 自动生成</span><br><span class="line">auto dsl-provider</span><br><span class="line">iface dsl-provider inet ppp</span><br><span class="line">pre-up &#x2F;bin&#x2F;ip link set enp1s0 up # line maintained by pppoeconf</span><br><span class="line">provider dsl-provider</span><br><span class="line">iface enp1s0 inet manual</span><br></pre></td></tr></table></figure><p>这里是我的的软路由的接口配置，可以看到出口网卡是 enp1s0，我会通过这个网卡进行 PPPoE 拨号上网。这个配置最后的 <code>dsl-provider</code> 是由 pppoeconf 自动生成的，我们之后会讲到。</p><p>请注意，在这里不要配置 DHCP 连接，不然内置的  dhclient 会和之后我们用到的 <code>wide-dhcpv6-client</code> 冲突。</p><p>因为我们是要配置软路由，所以我们需要启用 IPv6 转发。</p><p>在  <code>/etc/sysctl.conf</code> 添加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">net.ipv6.conf.all.forwarding&#x3D;2</span><br><span class="line">net.ipv6.conf.default.forwarding&#x3D;2</span><br><span class="line"></span><br><span class="line">net.ipv6.conf.all.accept_ra&#x3D;2</span><br><span class="line">net.ipv6.conf.default.accept_ra&#x3D;2</span><br><span class="line"></span><br><span class="line">net.ipv6.conf.all.use_tempaddr&#x3D;2</span><br><span class="line">net.ipv6.conf.default.use_tempaddr&#x3D;2</span><br></pre></td></tr></table></figure><p>我们通过设置: <code>net.ipv6.conf.all.forwarding=2</code> 和 <code>net.ipv6.conf.default.forwarding=2</code> 启用了 IPv6 转发，但是根据注释：</p><blockquote><p>Uncomment the next line to enable packet forwarding for IPv6</p><p>Enabling this option disables Stateless Address Autoconfiguration</p><p>based on Router Advertisements for this host</p></blockquote><p>开启了这个选项之后，系统将不会进行 RA 处理，也就是我们的广域网将不会有 IPv6 地址，所以我们这里手动设置了：<code>net.ipv6.conf.all.accept_ra=2</code> 和 <code>net.ipv6.conf.default.accept_ra=2</code> 来启用 RA 处理。</p><p>最后两行是启用 IPv6 的隐私扩展，具体可以阅读 Arch Wiki 的相关<a href="https://wiki.archlinux.org/index.php/IPv6_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">介绍</a>。</p><p>因为 RA 是 ICMPv6 报文，所以我们要在防火墙上允许 ICMPv6 的通过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p ipv6-icmp -j ACCEPT</span><br><span class="line">iptables -A FORWARD -p ipv6-icmp -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p ipv6-icmp -j ACCEPT</span><br><span class="line">ip6tables -A INPUT -p ipv6-icmp -j ACCEPT</span><br><span class="line">ip6tables -A FORWARD -p ipv6-icmp -j ACCEPT</span><br><span class="line">ip6tables -A OUTPUT -p ipv6-icmp -j ACCEPT</span><br></pre></td></tr></table></figure><p>接下来我们来配置 PPPoE 上网，运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install pppoeconf</span><br></pre></td></tr></table></figure><p>在安装 <code>pppoeconf</code> 的时候会自动安装 <code>pppd</code>，<code>pppoeconf</code> 是个帮助你配置 <code>pppd</code> 的小工具，安装完成后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pppoeconf</span><br></pre></td></tr></table></figure><p>然后按照指示输入你宽带的账号密码，如果其他选项的含义不清楚请选择默认，在配置成功后，你可以通过: <code>poff</code>，<code>pon</code> 和 <code> plog</code>，来关闭、开启 PPoE 以及显示 log。</p><p>但是在默认的情况下，<code>pppoeconf</code> 自动生成的配置文件不会启用 IPv6，我们还需要对配置文件进行一些修改。</p><p>配置文件在 <code>/etc/ppp/peers/</code> 目录下，我这里自动生成的是 <code>dsl-provider</code>。</p><p><code>/etc/ppp/peers/dsl-provider</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">noipdefault</span><br><span class="line">defaultroute</span><br><span class="line">replacedefaultroute</span><br><span class="line">hide-password</span><br><span class="line">noauth</span><br><span class="line">persist</span><br><span class="line">persist</span><br><span class="line">maxfail 0</span><br><span class="line">plugin rp-pppoe.so</span><br><span class="line">nic-enp1s0</span><br><span class="line">user &quot;宽带账号&quot;</span><br><span class="line">usepeerdns</span><br><span class="line">+ipv6</span><br><span class="line">debug</span><br></pre></td></tr></table></figure><p>这里我在末尾添加上了<code>+ipv6</code>，请注意加号，其次我还添加上了 <code>debug</code>，用于之后使用 <code>plog</code> 来 Debug 问题，此时你重新启动 PPPoE，然后输入 <code>ip addr show ppp0</code>，观察 <code>ppp0</code> 接口应该就能看到分配的 IPv6 地址了，因为我们启用了隐私扩展，所以你能看到有两个 IPv6 地址。</p><p><img src="ppp0.jpeg" alt="ppp0"></p><p>接下来我们需要给内网设备也分配对应的 IPv6 地址。这里我们用到了 Prefix delegation（<a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E7%BC%80%E4%BB%A3%E7%90%86">前缀代理</a>），简称 PD。简单来说就是我们向我们的上级路由发送 PD 请求，上级路由会分给我们一个前缀长度小于等于64的网段，然后我们就能将个网段划分成一个或者一些 /64 的网段接着向局域网内的设备分配，此时局域网内的设备的上级路由就是我们的网关。</p><p>这里有个需要注意的地方，我们向局域网设备分配的 IP 地址也是公网地址，而不是 IPv4 时代的私有地址，不过因为上级路由是我们的网关，所以这些设备其实是在一个局域网内，并且因为这些地址都是公网地址，所以我们不需要做 NAT 转化的操作。</p><p>为了实现这个功能，我们需要使用 <code>wide-dhcpv6-client</code>。</p><p>首先安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install wide-dhcpv6-client</span><br></pre></td></tr></table></figure><p>在安装完成后，我们需要配置 PD。</p><p>编辑：<code>/etc/wide-dhcpv6/dhcp6c.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface ppp0 &#123;</span><br><span class="line">  send ia-pd 0;</span><br><span class="line">&#125;;</span><br><span class="line">id-assoc pd 0 &#123;</span><br><span class="line">  # use the interface connected to your LAN</span><br><span class="line">  prefix-interface br0 &#123;</span><br><span class="line">    sla-id 1;</span><br><span class="line">    sla-len 4;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段配置也是来自 <a href="https://wiki.archlinux.org/index.php/IPv6_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Archi Wiki</a>，其中的 <code>ppp0</code> 应该是你广域网的接口，而 <code>br0</code> 应该是你局域网的接口，关于 <code>sla-len</code>的长度有个注释需要注意：</p><blockquote><p><strong>注意：</strong> <code>sla-len</code> 应设置为满足 <code>(WAN-prefix) + (sla-len) = 64</code> 的值。这里示范的情况是针对一个长度 <code>/56</code> 的前缀，56+8=64。对于前缀长度 <code>/64</code> 的网络，<code>sla-len</code> 应为 <code>0</code>。</p></blockquote><p>因为我的 ISP 分配的是个 <code>/60</code> 的网段，所以 <code>sla-len</code> 的值是 <code>4</code>，我建议大家可以先填成 <code>0</code>，然后通过运行：<code>dhcp6c -f -D ppp0</code> 命令，观察你的 ISP 分配的网段大小，然后再修改对应的值。</p><p>这里非常感谢 Rio 提供的一个新的现代化的 DHCP6c System Service 用来替换自带的 <code>wide-dhcpv6-client.service</code> 。</p><p>添加到 <code>/etc/systemd/system/dhcp6c.service</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;WIDE DHCPv6 Client</span><br><span class="line">Wants&#x3D;network-online.target</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;dhcp6c -f ppp0</span><br><span class="line">ExecReload&#x3D;&#x2F;bin&#x2F;kill -HUP $MAINPID</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">RestartSec&#x3D;3</span><br><span class="line">NoNewPrivileges&#x3D;yes</span><br><span class="line">PrivateTmp&#x3D;yes</span><br><span class="line">ProtectHome&#x3D;yes</span><br><span class="line">ProtectSystem&#x3D;strict</span><br><span class="line">ReadWritePaths&#x3D;&#x2F;run&#x2F; &#x2F;var&#x2F;log&#x2F;</span><br><span class="line">ProtectKernelTunables&#x3D;yes</span><br><span class="line">ProtectControlGroups&#x3D;yes</span><br><span class="line">SystemCallFilter&#x3D;~@mount</span><br><span class="line">SystemCallArchitectures&#x3D;native</span><br><span class="line">LockPersonality&#x3D;yes</span><br><span class="line">MemoryDenyWriteExecute&#x3D;yes</span><br><span class="line">RestrictRealtime&#x3D;yes</span><br><span class="line">RemoveIPC&#x3D;yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>然后运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop wide-dhcpv6-client.service</span><br><span class="line">systemctl disable wide-dhcpv6-client.service</span><br><span class="line">systemctl enable dhcp6c.service</span><br></pre></td></tr></table></figure><p>你就可以通过 <code>dhcp6c.service</code> 来控制 <code>wide-dhcpv6-client</code> 了。</p><p>运行成功后，观察你局域网的接口，应该就能看到对应分配的地址了。</p><p><img src="lan.jpeg" alt="lan"></p><p>最后需要向局域网设备发送 RA ，使用 slaac 来分配IP地址，这里我们使用了 Dnsmasq，因为 Dnsmasq 是个非常常用的软件，就不多介绍了，在 Dnsmasq 的配置文件里加上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enable-ra</span><br><span class="line">dhcp-range&#x3D;::,constructor:br0,ra-only,slaac</span><br></pre></td></tr></table></figure><p><code>br0</code> 填入你的局域网接口。</p><p>这时你的局域网设备应该也能分配到全球唯一的 IPv6 地址了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景故事&quot;&gt;&lt;a href=&quot;#背景故事&quot; class=&quot;headerlink&quot; title=&quot;背景故事&quot;&gt;&lt;/a&gt;背景故事&lt;/h2&gt;&lt;p&gt;这一次踩坑之旅的起源是一段来自内核恐慌 Telegram 群的关于 IPv6 的讨论，&lt;a href=&quot;https://tw</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>世界与我们</title>
    <link href="http://blog.otakusaikou.com/2020/11/08/the-world-and-us/"/>
    <id>http://blog.otakusaikou.com/2020/11/08/the-world-and-us/</id>
    <published>2020-11-08T00:58:36.000Z</published>
    <updated>2020-11-19T03:20:05.914Z</updated>
    
    <content type="html"><![CDATA[<p><img src="nytime.jpg" alt="image-20201105123703489"></p><p><img src="the-economist.jpg" alt="image-20201105123703489"></p><p><img src="new-yorker.jpg" alt="image-20201105123703489"></p><p><img src="wjl.jpg" alt="image-20201105123703489"></p><p><img src="time.jpg" alt="image-20201105123703489"></p><p><img src="bbc.jpg" alt="image-20201105123703489"></p><p><img src="reuters.jpg" alt="image-20201105123703489"></p><p><img src="xinhuanet.jpg" alt="image-20201105123703489"></p><p><img src="caixin.jpg" alt="image-20201105123703489"></p><p><img src="huanqiu.jpg" alt="image-20201105123703489"></p><p><img src="people-net.jpg" alt="image-20201105123703489"></p><p><img src="peoples-daily-twitter.jpg" alt="image-20201105123703489"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;nytime.jpg&quot; alt=&quot;image-20201105123703489&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;the-economist.jpg&quot; alt=&quot;image-20201105123703489&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何写一个教程</title>
    <link href="http://blog.otakusaikou.com/2020/11/05/how-to-write-a-tutorial/"/>
    <id>http://blog.otakusaikou.com/2020/11/05/how-to-write-a-tutorial/</id>
    <published>2020-11-05T12:19:08.000Z</published>
    <updated>2020-11-19T03:20:05.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着社区人数的增加，各种相关教程的数量也开始增长，但是就我的观察而言，很多教程并没有做到基本的可读性与可访问性。而这篇文章的目的就是介绍如何做出基本美观的教程。当然在这篇文章我不会提及如何创作教程内容，这篇文章的主要关注点是，教程创作的流程、部署以及发布。</p><h2 id="可读性和可访问性"><a href="#可读性和可访问性" class="headerlink" title="可读性和可访问性"></a>可读性和可访问性</h2><p>首先要回答到是，什么是可读性和可访问性。我们先从可读性开始说明，可读性包括很多的方面：字体排版、网页的配色等。要一一说明显然是不现实的，这里我们就用一个例子说明。</p><p><img src="image-20201105123703489.png" alt="image-20201105123703489"></p><p><img src="image-20201105123738827.png" alt="image-20201105123738827"></p><p>这是同一段文本经过不同的排版方式后呈现出来的效果，我相信经过这个对比，应该很容易体会出为什么是什么可读性，以及为什么可读性是重要的。</p><p>接下来，是可访问性，你应该优先把教程作为一个的网页进行发布，而不是通过例如：加密的百度网盘分享一个 docx，来分发你的教程。</p><p>我们就以「加密的百度网盘分享一个 的 docx」作为例子，来说一下为什么这个是一种不好的方法。</p><p>首先加密的百度网盘就意味的一件事，这个教程是难以传播的，先不论如果通过百度网盘访问你的教程，还需要下载文件（并且忍受缓慢的速度），光是访问需要输入密码这件事，其实就是在减少你的教程的访问数量。</p><p>其次我们来讲一下分发 docx 文件为什么不好，你得先明确一点，docx 是 Microsoft Office 的格式而 Minecraft 是个跨平台的游戏，你的读者不是一定只是 Windows 用户，也可以是 macOS 和 Linux 用户，哪怕是 Windows 用户，也不一定就买了 Office，这一点就决定了对于他们来说打开 docx 其实并不是一件非常方便的事情。另外用 docx 来分发你的教程，如果你的教程需要持续更新，读者也需要不时的重新下载一遍，这个显然是不可取的。</p><p>有的作者可能会选择将自己的教程内容直接发布在某个论坛之上。但是这其实也不是一个非常好的办法，因为不同的论坛有不同的规定，你的教程很有可能在某天就变得无法访问了，这相当于将你的教程拱手送给了论坛。</p><p>而一个单独的网页则没有以上的问题，读者只需要输入地址即可访问，也不需要不断的重复下载一个文件，而且你可以自己控制网页的样式，并且可以做到自动化：在每次更新之后只要经过简单的步骤就可以更新对应的网页。</p><h2 id="撰写"><a href="#撰写" class="headerlink" title="撰写"></a>撰写</h2><p>你可以使用 <a href="https://zh.wikipedia.org/wiki/Markdown">Markdown</a> 作为你的写作格式，一切根据你需要来，有些作者可能会更加习惯 LaTex 等格式。关于 Markdown 的语法，这里就不多加说明了，非常容易学习。之后你得选定一个网页生成器，对于长篇的教程来说，合适的工具是各种电子书生成器，比如 <a href="https://github.com/rust-lang/mdBook">mdbook</a>（可能有的作者会使用 GitBook，但是 Gitbook 这个项目已经停止更新了，请不要使用了）。</p><p>接下来你就可以通过这些工具，写出一个精美的教程了。</p><h2 id="构建与发布"><a href="#构建与发布" class="headerlink" title="构建与发布"></a>构建与发布</h2><p>在你写了一定内容的教程之后，你接下来面临的一个问题就是如何发布你的教程，这里推荐使用 <a href="https://pages.github.com/">Github Pages</a> 的功能，你不需要有自己的域名和服务器，可以直接发布静态网页。当然，很多作者可能会将教程在本地构建完成，然后再通过 Git 同步到 Github 仓库上，但这其实不是一种好的方式，构建工作应该自动进行。你可以通过类似 <a href="https://github.com/features/actions">Github Action</a> 这样的工具，自动的构建与发布你的教程，这里是 Neutrino 的<a href="https://github.com/FledgeXu/Neutrino/blob/master/.github/workflows/deploy.yaml">例子</a>。</p><p>最后呈现出来的效果是，我只要修改好内容，然后向 Github push 修改好的内容，对应的网站会自动的更新与发布。</p><h2 id="一些额外事项"><a href="#一些额外事项" class="headerlink" title="一些额外事项"></a>一些额外事项</h2><p>在开始写作一个教程的时候，你需要选择一个合适的许可证，这个许可证会在一定程度上保护你的权利，这里建议使用 <a href="https://creativecommons.org/">Creative Commons</a> 系列许可证。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着社区人数的增加，各种相关教程的数量也开始增长，但是就我的观察而言，很多教程并没有做到基本的可读性与可访问性。而这篇文章的目的就是介绍如何</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>专业分工是给昆虫准备的</title>
    <link href="http://blog.otakusaikou.com/2020/11/02/specialization-is-for-insects/"/>
    <id>http://blog.otakusaikou.com/2020/11/02/specialization-is-for-insects/</id>
    <published>2020-11-02T14:53:13.000Z</published>
    <updated>2020-11-19T03:20:05.914Z</updated>
    
    <content type="html"><![CDATA[<p>仔细想想，这个博客需要有一个类似于「发刊词」一样的东西。当然不需要什么非常正式的发刊词，而是某种可以表明某种「觉悟」的东西。想了想用了这么一个标题：「专业分工是给昆虫准备的」。这个这句话其实是来自科幻小说家 <a href="https://en.wikipedia.org/wiki/Robert_A._Heinlein">Robert Heinlein</a> 的名言：</p><blockquote><p>“A human being should be able to change a diaper, plan an invasion, butcher a hog, conn a ship, design a building, write a sonnet, balance accounts, build a wall, set a bone, comfort the dying, take orders, give orders, cooperate, act alone, solve equations, analyze a new problem, pitch manure, program a computer, cook a tasty meal, fight efficiently, die gallantly. Specialization is for insects.”</p></blockquote><p>我本人其实并没有读过 Heinlein 的小说，这段话也是从李如一先生的<a href="https://blog.yitianshijie.net/2016/12/19/a-revolutionary-catalog/">博客</a>上读到的。但这段话确实象征了某些东西，某些对我而言非常重要觉悟。这个觉悟大概是我们要追求「完整性」，追求成为一个完整的人。</p><p>而这个博客里的内容自然也会非常广泛，只要我感兴趣的事物，估计都会有所涉猎。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;仔细想想，这个博客需要有一个类似于「发刊词」一样的东西。当然不需要什么非常正式的发刊词，而是某种可以表明某种「觉悟」的东西。想了想用了这么一个标题：「专业分工是给昆虫准备的」。这个这句话其实是来自科幻小说家 &lt;a href=&quot;https://en.wikipedia.org</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>你好世界</title>
    <link href="http://blog.otakusaikou.com/2020/11/02/Hello-Wolrd/"/>
    <id>http://blog.otakusaikou.com/2020/11/02/Hello-Wolrd/</id>
    <published>2020-11-02T14:16:19.000Z</published>
    <updated>2020-11-19T03:20:05.914Z</updated>
    
    <content type="html"><![CDATA[<p>看起来 Hexo 必须要有一篇文章才会生成 <code>index.htm</code>，那么我就创建这一篇文章作为占位符吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看起来 Hexo 必须要有一篇文章才会生成 &lt;code&gt;index.htm&lt;/code&gt;，那么我就创建这一篇文章作为占位符吧。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
